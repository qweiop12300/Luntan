<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.chen.luntan.mapper.PostMapper">


    <insert id="insertPost" parameterType="post">
        insert into post(user_id,type_id,images,title,content,create_date,update_date)
        values(#{user_id},#{type_id},#{images},#{title},#{content},#{create_date},#{update_date});
    </insert>

    <update id="updatePost" parameterType="post">
        update post set type_id = #{type_id},images = #{images},title = #{title},content = #{content},update_date = #{update_date}
        where id = #{id};
    </update>
    <delete id="deletePost" >
        delete from post_collects where post_id = #{post_id};
        delete from comments_like where post_id = #{post_id};
        delete from post_comments where post_id = #{post_id};
        delete from post_like where post_id = #{post_id};
        delete from post where id = #{post_id};
    </delete>

    <delete id="deletePostComments" >
        delete from post_comments
        where id = #{id};
    </delete>

    <update id="updateComments" parameterType="post_comments">
        update post_comments set(user_id,post_id,reply_id,create_date,`like`,title)
        values(#{user_id},#{post_id},#{reply_id},#{create_date},#{like},#{title})
        where id = #{id}
    </update>

    <update id="addPostLike">
        <if test="isAdd==1">
            update post set `like` = `like`+1
            where id = #{id};
        </if>
        <if test="isAdd==0">
            update post set `like` = `like`-1
            where id = #{id};
        </if>
    </update>

    <update id="addPostView">
        update post set `view` = `view`+1
        where id = #{id};
    </update>

    <update id="addPostCollects">
        <if test="isAdd==1">
            update post set collects = collects+1
            where id = #{id};
        </if>
        <if test="isAdd==0">
            update post set collects = collects-1
            where id = #{id};
        </if>
    </update>

    <update id="addPostComments">
        <if test="isAdd==1">
            update post set comments = comments+1
            where id = #{id};
        </if>
        <if test="isAdd==0">
            update post set comments = comments-1
            where id = #{id};
        </if>
    </update>

    <update id="addPostCommentsLike">
        <if test="isAdd==1">
            update post_comments set `like` = `like`+1
            where id = #{id};
        </if>
        <if test="isAdd==0">
            update post_comments set `like` = `like`-1
            where id = #{id};
        </if>
    </update>

    <resultMap id="postMap" type="post">
        <id  column="id" property="id"/>
        <result column="user_id" property="user_id"/>
        <result column="type_id" property="type_id"/>
        <result column="images" property="images"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="create_date" property="create_date"/>
        <result column="update_date" property="update_date"/>
        <result column="comments" property="comments"/>
        <result column="collects" property="collects"/>
        <result column="view" property="view"/>
        <result column="plike" property="like"/>
        <result column="top" property="top"/>
        <result column="essence" property="essence"/>
        <result column="plu" property="plu"/>
        <result column="pcu" property="pcu"/>
        <association property="user_data" resultMap="userDataConciseMap"/>
        <association property="post_type" resultMap="postTypeMap"/>
    </resultMap>

    <resultMap id="userDataConciseMap" type="user_data_concise">
        <result property="avatar" column="avatar"/>
        <result property="name" column="name"/>
        <result property="sex" column="sex"/>
        <result property="type" column="type"/>
    </resultMap>

    <resultMap id="postTypeMap" type="post_type">
        <id property="id" column="pt_id"/>
        <result property="title" column="pt_title"/>
    </resultMap>

    <select id="selectPostType" resultType="post_type">
        select * from post_type
    </select>

    <select id="selectPost" resultMap="postMap">
        select pl.user_id plu,pc.user_id pcu,p.id, p.user_id, type_id, images, p.title, SUBSTR(content,1,40) content, comments, collects, view, `like` plike, p.create_date, update_date, top, essence,avatar, name, sex, type,pt.id pt_id, pt.title pt_title
        from post p join user_data u on u.user_id = p.user_id join post_type pt on p.type_id = pt.id
        left join post_like pl on p.id = pl.post_id and pl.user_id = #{user_id} left join post_collects pc on p.id = pc.post_id and pc.user_id = #{user_id}

        <where>
        <if test="type_id != 0">
        AND type_id = #{type_id}
        </if>
        <if test="uid != 0">
            AND p.user_id = #{uid}
        </if>
        </where>
        order by update_date desc limit #{first},#{last};
    </select>

    <select id="getPost" resultMap="postMap">
        select pl.user_id plu,pc.user_id pcu,p.id, p.user_id, type_id, images, p.title,content, comments, collects, view, `like`, p.create_date, update_date, top, essence,avatar, name, sex, type,pt.id pt_id, pt.title pt_title from post p join user_data u on u.user_id = p.user_id join post_type pt on p.type_id = pt.id
            left join post_like pl on p.id = pl.post_id and pl.user_id = #{user_id} left join post_collects pc on p.id = pc.post_id and pc.user_id = #{user_id}
        where p.id = #{id}
    </select>

    <insert id="like" parameterType="post_like">
        insert into post_like(user_id,post_id)
        values(#{user_id},#{post_id})
    </insert>

    <insert id="collects" parameterType="post_collects">
        insert into post_collects(user_id,post_id)
        values(#{user_id},#{post_id})
    </insert>

    <insert id="commentsLike" parameterType="comments_like">
        insert into comments_like(post_id,user_id,comments_id)
        values(#{post_id},#{user_id},#{comments_id})
    </insert>

    <delete id="deleteLike" parameterType="post_like">
        delete from post_like where user_id = #{user_id} and post_id = #{post_id};
    </delete>

    <delete id="deleteCollects" parameterType="post_collects">
        delete from post_collects where user_id = #{user_id} and post_id = #{post_id};
    </delete>

    <delete id="deleteCommentsLike" parameterType="comments_like">
        delete from comments_like where user_id = #{user_id} and comments_id = #{comments_id};
    </delete>

    <insert id="comments" parameterType="post_comments">
        insert into post_comments(user_id,post_id,reply_id,create_date,title)
        values(#{user_id},#{post_id},#{reply_id},#{create_date},#{title})
    </insert>

    <select id="selectLike" resultType="post_like">
        select * from post_like
        <where>
            <if test="userId!=0">
                and user_id = #{userId}
            </if>
            <if test="postId!=0">
                and post_id = #{postId}
            </if>
        </where>
    </select>


    <select id="selectCollects" resultType="post_collects">
        select * from post_collects
        <where>
            <if test="userId!=0">
                and user_id = #{userId}
            </if>
            <if test="postId!=0">
                and post_id = #{postId}
            </if>
        </where>
    </select>
    <resultMap id="selectCommentsMap" type="post_comments">
        <id  column="id" property="id"/>
        <result column="user_id" property="user_id"/>
        <result column="post_id" property="post_id"/>
        <result column="reply_id" property="reply_id"/>
        <result column="title" property="title"/>
        <result column="create_date" property="create_date"/>
        <result column="plike" property="like"/>
        <association property="user_data" resultMap="userDataConciseMap"/>
    </resultMap>
    <select id="selectComments" resultMap="selectCommentsMap">
        select pc.id, pc.user_id, post_id, reply_id, pc.create_date, pc.like plike, title, avatar, name, sex, type from post_comments pc join user_data ud on pc.user_id = ud.user_id
        <where>
            <if test="userId!=0">
                and pc.user_id = #{userId}
            </if>
            <if test="postId!=0">
                and pc.post_id = #{postId}
            </if>
        </where>
        order by pc.create_date
    </select>

    <select id="selectCommentsLike" resultType="comments_like">
        select * from comments_like
        <where>
            <if test="userId!=0">
                and user_id = #{userId}
            </if>
            <if test="commentsId!=0">
                and comments_id = #{commentsId}
            </if>
        </where>
    </select>

    <select id="getPostUserId" resultType="long" parameterType="long">
        select user_id from post where id = #{postId}
    </select>

    <select id="getCommentsUserId" parameterType="long" resultType="long">
        select user_id from post_comments
        where id = #{id}
    </select>

    <select id="getCommentsPostId" parameterType="long" resultType="long">
        select post_id from post_comments
        where id = #{id}
    </select>



</mapper>